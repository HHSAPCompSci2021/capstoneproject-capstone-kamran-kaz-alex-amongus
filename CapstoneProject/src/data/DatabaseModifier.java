package data;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.GcpLaunchStage.Deprecated;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

/**
 * Creates and interacts with Firebase; handles actions used to submit, fetch, and access essays, submissions, and other parts
 * 
 * @author Alex Wang, John Shelby for assistance in Firebase logic
 *
 */
public class DatabaseModifier {
	
	private DatabaseReference classroomsRef;
	private DatabaseChangeListener DBChangeListener;

	public DatabaseModifier() {
		setupDatabase();
	}
	
	/**
	 * Creates a Database Reference and sets up necessary Firebase options
	 */
	public void setupDatabase() {
		FileInputStream refreshToken;
		
		try {
			refreshToken = new FileInputStream("GradeMeFirebaseKey.json");
			
			FirebaseOptions options = FirebaseOptions.builder()
					.setCredentials(GoogleCredentials.fromStream(refreshToken))
				    .setDatabaseUrl("https://grademe-e5a48-default-rtdb.firebaseio.com/")
				    .build();

			FirebaseApp.initializeApp(options);
			
			DatabaseReference database = FirebaseDatabase.getInstance().getReference();
			
			// structure = root/classrooms
			classroomsRef = database.child("classrooms");
			
			
			// always keep local variables synced up
			DBChangeListener = new DatabaseChangeListener();
			classroomsRef.addChildEventListener(DBChangeListener);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Submit classroom to Database
	 * @param classroomSubmission Classroom object to be submitted to database root
	 * @return postID from new data path (DatabaseReference) used to retrieve data
	 */
	@Deprecated
	public String submitClassroomToDatabase(Classroom classroomSubmission) {
		String postID = null;
		
		try {
			System.out.println("submitToDatabase() called");
			DatabaseReference pushedPostRef = classroomsRef.push();
			pushedPostRef.setValueAsync(classroomSubmission);
			
			
			// get unique key generated by push()
			postID = pushedPostRef.getKey();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return postID;
	}
	
	/**
	 * Submit Student object to known Classroom in Database
	 * @param student Student object to be added
	 * @param classroomID postID of the classroom (returned by submitClassroomToDatabase())
	 */
	@Deprecated
	public void addStudentToClassroom(Student student, String classroomID) {
		DatabaseReference classroomRef = classroomsRef.child(classroomID);
		Map<String, Object> studentAddition = new HashMap<>();
		studentAddition.put("students/1", student);
		
//		classroomRef.child("students").child("groupA"). addValueEventListener(...);
		
		// current bug - code does not add student obejct to a list of students -- instead it replaces all under students/
		
		classroomRef.updateChildrenAsync(studentAddition);	
	}
	
	/**
	 * Updates the classroom at a particular location in the database to a new Classroom object that is passed in through the parameter.
	 * @param key The location of the classroom in the database. This key should be obtained from the call to getClassrooms().
	 * @param classroom The new classroom object that you want to update at the specified location. 
	 */
	public void set(String key, Classroom classroom) {
		Map<String, Object> update = new HashMap<String, Object>();
		update.put(key, classroom);
		classroomsRef.updateChildrenAsync(update);
	}
	
	
	/**
	 * Adds a new classroom to the database. 
	 * If you are trying to update existing data, use the set() method instead.
	 * This method will cause the database to create a new entry in the database instead of updating the classroom if it already exists.
	 * @param classroom The new Classroom object that you want to put into the database.
	 */
	public void addClassroom(Classroom classroom) {
		classroomsRef.push().setValueAsync(classroom);
	}
	
	public HashMap<String, Classroom> getClassrooms() {
		HashMap<String, Classroom> classrooms = DBChangeListener.getClassrooms();
		while (classrooms.size() == 0) {
			try {
				Thread.sleep(1000);
				classrooms = DBChangeListener.getClassrooms();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		return classrooms;
	}
	
}
