package data;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentLinkedQueue;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.GcpLaunchStage.Deprecated;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

/**
 * Creates and interacts with Firebase; handles actions used to submit, fetch, and access essays, submissions, and other parts
 * Allows the user to be able to add and set values inside the Database. 
 * Values of the Database can be accessed through a HashMap that includes the classrooms. The HashMap should not be used to modify the Database. Access the key and then push the values of the classroom through the add() and set() methods
 * @author Alex Wang, Kaz Nakao John Shelby for assistance in Firebase logic
 *
 */
public class DatabaseModifier {
	
	private static DatabaseReference classroomsRef;
	private static  DatabaseChangeListener DBChangeListener;
	
	/**
	 * Creates a Database Reference and sets up necessary Firebase options
	 */
	public static void setupDatabase() {
		FileInputStream refreshToken;
		
		try {
			refreshToken = new FileInputStream("GradeMeFirebaseKey.json");
			
			FirebaseOptions options = FirebaseOptions.builder()
					.setCredentials(GoogleCredentials.fromStream(refreshToken))
				    .setDatabaseUrl("https://grademe-e5a48-default-rtdb.firebaseio.com/")
				    .build();

			FirebaseApp.initializeApp(options);
			
			DatabaseReference database = FirebaseDatabase.getInstance().getReference();
			
			classroomsRef = database.child("classrooms");
			
			// always keep local variables synced
			DBChangeListener = new DatabaseChangeListener();
			classroomsRef.addChildEventListener(DBChangeListener);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Submit classroom to Database
	 * @param classroomSubmission Classroom object to be submitted to database root
	 * @return postID from new data path (DatabaseReference) used to retrieve data
	 */
	@Deprecated
	public String submitClassroomToDatabase(Classroom classroomSubmission) {
		String postID = null;
		
		try {
			System.out.println("submitToDatabase() called");
			DatabaseReference pushedPostRef = classroomsRef.push();
			pushedPostRef.setValueAsync(classroomSubmission);
			
			
			// get unique key generated by push()
			postID = pushedPostRef.getKey();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return postID;
	}
	
	/**
	 * Submit Student object to known Classroom in Database
	 * @param student Student object to be added
	 * @param classroomID postID of the classroom (returned by submitClassroomToDatabase())
	 */
	@Deprecated
	public void addStudentToClassroom(Student student, String classroomID) {
		DatabaseReference classroomRef = classroomsRef.child(classroomID);
		Map<String, Object> studentAddition = new HashMap<>();
		studentAddition.put("students/1", student);
		classroomRef.updateChildrenAsync(studentAddition);	
	}
	
	/**
	 * Updates the classroom at a particular location in the database to a new Classroom object that is passed in through the parameter.
	 * @param key The location of the classroom in the database. This key should be obtained from the call to getClassrooms().
	 * @param classroom The new classroom object that you want to update at the specified location. 
	 */
	public static void set(String key, Classroom classroom) {
		Map<String, Object> update = new HashMap<String, Object>();
		update.put(key, classroom);
		classroomsRef.updateChildrenAsync(update);
	}
	
	
	/**
	 * Adds a new classroom to the database. 
	 * If you are trying to update existing data, use the set() method instead.
	 * This method will cause the database to create a new entry in the database instead of updating the classroom if it already exists.
	 * @param classroom The new Classroom object that you want to put into the database.
	 */
	public static void addClassroom(Classroom classroom) {
		classroomsRef.push().setValueAsync(classroom);
	}
	
	/**
	 * Returns a HashMap with key String and value Classroom to model the Database. 
	 * This HashMap should not be modified. To modify the database, the add() and set() method equivalents should be used.
	 * @return A HashMap that contains the keys of the locations of the classrooms as a key and classroom objects that are at each of those locations in the database
	 */
	public static HashMap<String, Classroom> getClassrooms() {
		HashMap<String, Classroom> classrooms = DBChangeListener.getClassrooms();
		return classrooms;
	}
	
	/**
	 * If the classroom does not exist in the database, an empty String will be returned
	 * @param classroom Classroom that you want to get the key of
	 * @return The key or location of the classroom in the database
	 */
	public static String getKey(Classroom classroom) {
		HashMap<String, Classroom> classrooms = getClassrooms();
		Set<String> keys = classrooms.keySet();
		for (String key : keys) {
			Classroom match = classrooms.get(key);
			if (match.equals(classroom)) {
				return key;
			}
		}
		return "";
	}
	
	public static ConcurrentLinkedQueue<Map.Entry<String, Classroom>> getQueue() {
		return DBChangeListener.getQueue();
	}
	
}
